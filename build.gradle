plugins {
    id 'java-library'
    id 'maven-publish'
}

ext {
    versions = [:]
    versions.spring = '5.1.12.RELEASE'
    versions.junit = '5.5.1'
}

sourceCompatibility = 1.8
version = "${majorVersion}.${minorVersion}.${patchVersion}-SNAPSHOT"

repositories {
    jcenter()
}

dependencies {
    api "org.springframework:spring-context:${versions.spring.replaceAll('[0-9]+\\.RELEASE','0.RELEASE')}"
    implementation "org.springframework:spring-context:${versions.spring}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
            "org.springframework:spring-test:${versions.spring}",
            'org.hamcrest:hamcrest-library:2.1'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
}

test {
    useJUnitPlatform()
}

javadoc {
    options.memberLevel = 'PROTECTED'
    options.author = false
    options.header = project.name
    options.links(["http://docs.oracle.com/javase/8/docs/api/"] as String[])
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier = "javadoc"
    from javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.withType(Jar) {
    manifest {
        attributes(
                "Automatic-Module-Name": "${project.group}.${project.name}",
                "Specification-Title": project.description,
                "Specification-Version": "${majorVersion}.${minorVersion}",
                "Specification-Vendor": vendor,
                "Implementation-Title": project.description,
                "Implementation-Version": "${majorVersion}.${minorVersion}.${patchVersion}",
                "Implementation-Vendor": vendor,
                "Implementation-Vendor-Id": project.group
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

task release(group: 'Publishing', description: 'Build the testes artifacts for a release.') {
    doFirst {
        project.version = "${majorVersion}.${minorVersion}.${patchVersion}"
    }
    finalizedBy build
}
